/*
Apicurio Registry API [v3]

Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Important**: The Apicurio Registry REST API is available from `https://MY-REGISTRY-URL/apis/registry/v3` by default. Therefore you must prefix all API operation paths with `../apis/registry/v3` in this case. For example: `../apis/registry/v3/ids/globalIds/{globalId}`. 

API version: 3.0.x
Contact: apicurio@lists.jboss.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package registryclient

import (
	"encoding/json"
	"fmt"
)

// checks if the ArtifactContent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArtifactContent{}

// ArtifactContent 
type ArtifactContent struct {
	// Raw content of the artifact or a valid (and accessible) URL where the content can be found.
	Content string `json:"content"`
	// Collection of references to other artifacts.
	References []ArtifactReference `json:"references"`
}

type _ArtifactContent ArtifactContent

// NewArtifactContent instantiates a new ArtifactContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArtifactContent(content string, references []ArtifactReference) *ArtifactContent {
	this := ArtifactContent{}
	this.Content = content
	this.References = references
	return &this
}

// NewArtifactContentWithDefaults instantiates a new ArtifactContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArtifactContentWithDefaults() *ArtifactContent {
	this := ArtifactContent{}
	return &this
}

// GetContent returns the Content field value
func (o *ArtifactContent) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *ArtifactContent) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *ArtifactContent) SetContent(v string) {
	o.Content = v
}

// GetReferences returns the References field value
func (o *ArtifactContent) GetReferences() []ArtifactReference {
	if o == nil {
		var ret []ArtifactReference
		return ret
	}

	return o.References
}

// GetReferencesOk returns a tuple with the References field value
// and a boolean to check if the value has been set.
func (o *ArtifactContent) GetReferencesOk() ([]ArtifactReference, bool) {
	if o == nil {
		return nil, false
	}
	return o.References, true
}

// SetReferences sets field value
func (o *ArtifactContent) SetReferences(v []ArtifactReference) {
	o.References = v
}

func (o ArtifactContent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArtifactContent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["content"] = o.Content
	toSerialize["references"] = o.References
	return toSerialize, nil
}

func (o *ArtifactContent) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"content",
		"references",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varArtifactContent := _ArtifactContent{}

	err = json.Unmarshal(bytes, &varArtifactContent)

	if err != nil {
		return err
	}

	*o = ArtifactContent(varArtifactContent)

	return err
}

type NullableArtifactContent struct {
	value *ArtifactContent
	isSet bool
}

func (v NullableArtifactContent) Get() *ArtifactContent {
	return v.value
}

func (v *NullableArtifactContent) Set(val *ArtifactContent) {
	v.value = val
	v.isSet = true
}

func (v NullableArtifactContent) IsSet() bool {
	return v.isSet
}

func (v *NullableArtifactContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArtifactContent(val *ArtifactContent) *NullableArtifactContent {
	return &NullableArtifactContent{value: val, isSet: true}
}

func (v NullableArtifactContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArtifactContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


