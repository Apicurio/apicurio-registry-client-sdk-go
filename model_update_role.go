/*
Apicurio Registry API [v3]

Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Important**: The Apicurio Registry REST API is available from `https://MY-REGISTRY-URL/apis/registry/v3` by default. Therefore you must prefix all API operation paths with `../apis/registry/v3` in this case. For example: `../apis/registry/v3/ids/globalIds/{globalId}`. 

API version: 3.0.x
Contact: apicurio@lists.jboss.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package registryclient

import (
	"encoding/json"
	"fmt"
)

// checks if the UpdateRole type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateRole{}

// UpdateRole 
type UpdateRole struct {
	Role RoleType `json:"role"`
}

type _UpdateRole UpdateRole

// NewUpdateRole instantiates a new UpdateRole object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateRole(role RoleType) *UpdateRole {
	this := UpdateRole{}
	this.Role = role
	return &this
}

// NewUpdateRoleWithDefaults instantiates a new UpdateRole object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateRoleWithDefaults() *UpdateRole {
	this := UpdateRole{}
	return &this
}

// GetRole returns the Role field value
func (o *UpdateRole) GetRole() RoleType {
	if o == nil {
		var ret RoleType
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *UpdateRole) GetRoleOk() (*RoleType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *UpdateRole) SetRole(v RoleType) {
	o.Role = v
}

func (o UpdateRole) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateRole) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["role"] = o.Role
	return toSerialize, nil
}

func (o *UpdateRole) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"role",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateRole := _UpdateRole{}

	err = json.Unmarshal(bytes, &varUpdateRole)

	if err != nil {
		return err
	}

	*o = UpdateRole(varUpdateRole)

	return err
}

type NullableUpdateRole struct {
	value *UpdateRole
	isSet bool
}

func (v NullableUpdateRole) Get() *UpdateRole {
	return v.value
}

func (v *NullableUpdateRole) Set(val *UpdateRole) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateRole) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateRole(val *UpdateRole) *NullableUpdateRole {
	return &NullableUpdateRole{value: val, isSet: true}
}

func (v NullableUpdateRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


