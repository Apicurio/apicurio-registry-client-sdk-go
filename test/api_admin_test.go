/*
Apicurio Registry API [v2]

Testing AdminApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package registryclient

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_registryclient_AdminApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test AdminApiService CreateGlobalRule", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.AdminApi.CreateGlobalRule(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdminApiService CreateRoleMapping", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.AdminApi.CreateRoleMapping(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdminApiService DeleteAllGlobalRules", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.AdminApi.DeleteAllGlobalRules(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdminApiService DeleteGlobalRule", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var rule RuleType

        resp, httpRes, err := apiClient.AdminApi.DeleteGlobalRule(context.Background(), rule).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdminApiService DeleteRoleMapping", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var principalId string

        resp, httpRes, err := apiClient.AdminApi.DeleteRoleMapping(context.Background(), principalId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdminApiService ExportData", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.AdminApi.ExportData(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdminApiService GetConfigProperty", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var propertyName string

        resp, httpRes, err := apiClient.AdminApi.GetConfigProperty(context.Background(), propertyName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdminApiService GetGlobalRuleConfig", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var rule RuleType

        resp, httpRes, err := apiClient.AdminApi.GetGlobalRuleConfig(context.Background(), rule).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdminApiService GetLogConfiguration", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var logger string

        resp, httpRes, err := apiClient.AdminApi.GetLogConfiguration(context.Background(), logger).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdminApiService GetRoleMapping", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var principalId string

        resp, httpRes, err := apiClient.AdminApi.GetRoleMapping(context.Background(), principalId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdminApiService ImportData", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.AdminApi.ImportData(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdminApiService ListArtifactTypes", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.AdminApi.ListArtifactTypes(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdminApiService ListConfigProperties", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.AdminApi.ListConfigProperties(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdminApiService ListGlobalRules", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.AdminApi.ListGlobalRules(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdminApiService ListLogConfigurations", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.AdminApi.ListLogConfigurations(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdminApiService ListRoleMappings", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.AdminApi.ListRoleMappings(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdminApiService RemoveLogConfiguration", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var logger string

        resp, httpRes, err := apiClient.AdminApi.RemoveLogConfiguration(context.Background(), logger).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdminApiService ResetConfigProperty", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var propertyName string

        resp, httpRes, err := apiClient.AdminApi.ResetConfigProperty(context.Background(), propertyName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdminApiService SetLogConfiguration", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var logger string

        resp, httpRes, err := apiClient.AdminApi.SetLogConfiguration(context.Background(), logger).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdminApiService UpdateConfigProperty", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var propertyName string

        resp, httpRes, err := apiClient.AdminApi.UpdateConfigProperty(context.Background(), propertyName).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdminApiService UpdateGlobalRuleConfig", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var rule RuleType

        resp, httpRes, err := apiClient.AdminApi.UpdateGlobalRuleConfig(context.Background(), rule).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test AdminApiService UpdateRoleMapping", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var principalId string

        resp, httpRes, err := apiClient.AdminApi.UpdateRoleMapping(context.Background(), principalId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
