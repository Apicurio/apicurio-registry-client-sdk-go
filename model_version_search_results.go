/*
Apicurio Registry API [v3]

Apicurio Registry is a datastore for standard event schemas and API designs. Apicurio Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.  The Apicurio Registry REST API enables client applications to manage the artifacts in the registry. This API provides create, read, update, and delete operations for schema and API artifacts, rules, versions, and metadata.   The supported artifact types include: - Apache Avro schema - AsyncAPI specification - Google protocol buffers - GraphQL schema - JSON Schema - Kafka Connect schema - OpenAPI specification - Web Services Description Language - XML Schema Definition   **Important**: The Apicurio Registry REST API is available from `https://MY-REGISTRY-URL/apis/registry/v3` by default. Therefore you must prefix all API operation paths with `../apis/registry/v3` in this case. For example: `../apis/registry/v3/ids/globalIds/{globalId}`. 

API version: 3.0.x
Contact: apicurio@lists.jboss.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package registryclient

import (
	"encoding/json"
	"fmt"
)

// checks if the VersionSearchResults type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VersionSearchResults{}

// VersionSearchResults Describes the response received when searching for artifacts.
type VersionSearchResults struct {
	// The total number of versions that matched the query (may be more than the number of versions returned in the result set).
	Count int32 `json:"count"`
	// The collection of artifact versions returned in the result set.
	Versions []SearchedVersion `json:"versions"`
}

type _VersionSearchResults VersionSearchResults

// NewVersionSearchResults instantiates a new VersionSearchResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersionSearchResults(count int32, versions []SearchedVersion) *VersionSearchResults {
	this := VersionSearchResults{}
	this.Count = count
	this.Versions = versions
	return &this
}

// NewVersionSearchResultsWithDefaults instantiates a new VersionSearchResults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionSearchResultsWithDefaults() *VersionSearchResults {
	this := VersionSearchResults{}
	return &this
}

// GetCount returns the Count field value
func (o *VersionSearchResults) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *VersionSearchResults) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *VersionSearchResults) SetCount(v int32) {
	o.Count = v
}

// GetVersions returns the Versions field value
func (o *VersionSearchResults) GetVersions() []SearchedVersion {
	if o == nil {
		var ret []SearchedVersion
		return ret
	}

	return o.Versions
}

// GetVersionsOk returns a tuple with the Versions field value
// and a boolean to check if the value has been set.
func (o *VersionSearchResults) GetVersionsOk() ([]SearchedVersion, bool) {
	if o == nil {
		return nil, false
	}
	return o.Versions, true
}

// SetVersions sets field value
func (o *VersionSearchResults) SetVersions(v []SearchedVersion) {
	o.Versions = v
}

func (o VersionSearchResults) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VersionSearchResults) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["count"] = o.Count
	toSerialize["versions"] = o.Versions
	return toSerialize, nil
}

func (o *VersionSearchResults) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"count",
		"versions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVersionSearchResults := _VersionSearchResults{}

	err = json.Unmarshal(bytes, &varVersionSearchResults)

	if err != nil {
		return err
	}

	*o = VersionSearchResults(varVersionSearchResults)

	return err
}

type NullableVersionSearchResults struct {
	value *VersionSearchResults
	isSet bool
}

func (v NullableVersionSearchResults) Get() *VersionSearchResults {
	return v.value
}

func (v *NullableVersionSearchResults) Set(val *VersionSearchResults) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionSearchResults) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionSearchResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionSearchResults(val *VersionSearchResults) *NullableVersionSearchResults {
	return &NullableVersionSearchResults{value: val, isSet: true}
}

func (v NullableVersionSearchResults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionSearchResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


